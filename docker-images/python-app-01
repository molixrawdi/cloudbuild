# Dockerfile with build arguments for different Python versions
ARG PYTHON_VERSION=3.11
ARG BASE_IMAGE=python

FROM ${BASE_IMAGE}:${PYTHON_VERSION}

# Set build-time variables
ARG BUILD_DATE
ARG VERSION
ARG PYTHON_VERSION

# Add labels for better image management
LABEL maintainer="your-team@company.com"
LABEL version="${VERSION}"
LABEL python.version="${PYTHON_VERSION}"
LABEL build.date="${BUILD_DATE}"

# Set working directory
WORKDIR /app

# Install system dependencies (varies by base image)
RUN if [ "${BASE_IMAGE}" = "python-alpine" ]; then \
        apk add --no-cache gcc musl-dev linux-headers; \
    elif [ "${BASE_IMAGE}" = "python" ] || [ "${BASE_IMAGE}" = "python-slim" ]; then \
        apt-get update && apt-get install -y --no-install-recommends \
        gcc \
        && rm -rf /var/lib/apt/lists/*; \
    fi

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create non-root user
RUN adduser --disabled-password --gecos '' flaskuser && \
    chown -R flaskuser:flaskuser /app
USER flaskuser

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Set environment variables
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
ENV FLASK_ENV=production

# Run the application
CMD ["flask", "run"]